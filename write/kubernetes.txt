### **Task: Installation and Deployment of a Kubernetes Cluster**  

**Aim:**  
To set up a Kubernetes cluster, check cluster details, create deployments, run a Node.js application, expose it externally, and monitor pods.  

### **Theory:**  
Kubernetes (K8s) is an open-source container orchestration platform used for automating application deployment, scaling, and management. It consists of:  
- **Master Node:** Controls the cluster.  
- **Worker Nodes:** Run the containerized applications.  
- **Pods:** The smallest deployable unit in Kubernetes.  
- **Deployments:** Manage pod replicas and updates.  
- **Services:** Expose applications inside or outside the cluster.  

### **Program (Key Points to Cover):**  

#### **Step 1: Install Kubernetes Cluster**  
- Install `kubectl`, `kubeadm`, and `kubelet` on all nodes.  
- Initialize the master node:  
  ```bash
  kubeadm init
  ```
- Set up `kubectl` for the current user:  
  ```bash
  mkdir -p $HOME/.kube
  cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  chown $(id -u):$(id -g) $HOME/.kube/config
  ```
- Join worker nodes using the `kubeadm join` command (provided after initialization).  

#### **Step 2: Check Cluster Details**  
- Verify nodes:  
  ```bash
  kubectl get nodes
  ```
- Check cluster information:  
  ```bash
  kubectl cluster-info
  ```

#### **Step 3: Create a Deployment for Node.js Application**  
- Create a deployment file (`node-app-deployment.yaml`):  
  ```yaml
  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: node-app
  spec:
    replicas: 2
    selector:
      matchLabels:
        app: node-app
    template:
      metadata:
        labels:
          app: node-app
      spec:
        containers:
        - name: node-app
          image: node:latest
          command: ["node", "-e", "require('http').createServer((req, res) => res.end('Hello from Node.js on Kubernetes')).listen(3000)"]
          ports:
          - containerPort: 3000
  ```
- Apply the deployment:  
  ```bash
  kubectl apply -f node-app-deployment.yaml
  ```

#### **Step 4: Expose the Application to the External World**  
- Create a service to expose the app:  
  ```bash
  kubectl expose deployment node-app --type=LoadBalancer --port=80 --target-port=3000
  ```
- Get the external IP:  
  ```bash
  kubectl get services
  ```
- Access the application via the external IP.  

#### **Step 5: Monitor and Analyze Pods**  
- List running pods:  
  ```bash
  kubectl get pods
  ```
- Describe a pod:  
  ```bash
  kubectl describe pod <pod-name>
  ```
- View logs of a pod:  
  ```bash
  kubectl logs <pod-name>
  ```
- Monitor resource usage:  
  ```bash
  kubectl top pods
  ```

### **Expected Outcome:**  
- Successfully installed a Kubernetes cluster.  
- Deployed and exposed a Node.js application.  
- Accessed the application externally.  
- Monitored and analyzed running pods.  

Let me know if you need any changes! ðŸš€